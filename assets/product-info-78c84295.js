var p=Object.defineProperty;var y=(a,e,t)=>e in a?p(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var c=(a,e,t)=>(y(a,typeof e!="symbol"?e+"":e,t),t);customElements.get("product-info")||customElements.define("product-info",class extends HTMLElement{constructor(){super();c(this,"cartUpdateUnsubscriber");c(this,"variantChangeUnsubscriber");this.input=this.querySelector(".quantity__input"),this.currentVariant=this.querySelector(".product-variant-id"),this.variantSelects=this.querySelector("variant-radios"),this.submitButton=this.querySelector('[type="submit"]')}connectedCallback(){this.input&&(this.quantityForm=this.querySelector(".product-form__quantity"),this.quantityForm&&(this.setQuantityBoundries(),this.dataset.originalSection||(this.cartUpdateUnsubscriber=subscribe(PUB_SUB_EVENTS.cartUpdate,this.fetchQuantityRules.bind(this))),this.variantChangeUnsubscriber=subscribe(PUB_SUB_EVENTS.variantChange,t=>{const i=this.dataset.originalSection?this.dataset.originalSection:this.dataset.section;t.data.sectionId===i&&(this.updateQuantityRules(t.data.sectionId,t.data.html),this.setQuantityBoundries())})))}disconnectedCallback(){this.cartUpdateUnsubscriber&&this.cartUpdateUnsubscriber(),this.variantChangeUnsubscriber&&this.variantChangeUnsubscriber()}setQuantityBoundries(){const t={cartQuantity:this.input.dataset.cartQuantity?parseInt(this.input.dataset.cartQuantity):0,min:this.input.dataset.min?parseInt(this.input.dataset.min):1,max:this.input.dataset.max?parseInt(this.input.dataset.max):null,step:this.input.step?parseInt(this.input.step):1};let i=t.min;const n=t.max===null?t.max:t.max-t.cartQuantity;n!==null&&(i=Math.min(i,n)),t.cartQuantity>=t.min&&(i=Math.min(i,t.step)),this.input.min=i,this.input.max=n,this.input.value=i,publish(PUB_SUB_EVENTS.quantityUpdate,void 0)}fetchQuantityRules(){!this.currentVariant||!this.currentVariant.value||(this.querySelector(".quantity__rules-cart .loading-overlay").classList.remove("hidden"),fetch(`${this.dataset.url}?variant=${this.currentVariant.value}&section_id=${this.dataset.section}`).then(t=>t.text()).then(t=>{const i=new DOMParser().parseFromString(t,"text/html");this.updateQuantityRules(this.dataset.section,i),this.setQuantityBoundries()}).catch(t=>{console.error(t)}).finally(()=>{this.querySelector(".quantity__rules-cart .loading-overlay").classList.add("hidden")}))}updateQuantityRules(t,i){const n=i.getElementById(`Quantity-Form-${t}`),h=[".quantity__input",".quantity__rules",".quantity__label"];for(let s of h){const r=this.quantityForm.querySelector(s),u=n.querySelector(s);if(!(!r||!u))if(s===".quantity__input"){const l=["data-cart-quantity","data-min","data-max","step"];for(let o of l){const d=u.getAttribute(o);d!==null&&r.setAttribute(o,d)}}else r.innerHTML=u.innerHTML}}});
